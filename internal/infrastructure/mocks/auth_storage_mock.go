// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/UserNameShouldBeHere/AvitoTask/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthStorage is a mock of AuthStorage interface.
type MockAuthStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStorageMockRecorder
}

// MockAuthStorageMockRecorder is the mock recorder for MockAuthStorage.
type MockAuthStorageMockRecorder struct {
	mock *MockAuthStorage
}

// NewMockAuthStorage creates a new mock instance.
func NewMockAuthStorage(ctrl *gomock.Controller) *MockAuthStorage {
	mock := &MockAuthStorage{ctrl: ctrl}
	mock.recorder = &MockAuthStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStorage) EXPECT() *MockAuthStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthStorage) CreateUser(ctx context.Context, userCreds domain.UserCredantials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userCreds)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthStorageMockRecorder) CreateUser(ctx, userCreds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthStorage)(nil).CreateUser), ctx, userCreds)
}

// GetPassword mocks base method.
func (m *MockAuthStorage) GetPassword(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockAuthStorageMockRecorder) GetPassword(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockAuthStorage)(nil).GetPassword), ctx, email)
}

// HasUser mocks base method.
func (m *MockAuthStorage) HasUser(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUser", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUser indicates an expected call of HasUser.
func (mr *MockAuthStorageMockRecorder) HasUser(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUser", reflect.TypeOf((*MockAuthStorage)(nil).HasUser), ctx, name)
}
