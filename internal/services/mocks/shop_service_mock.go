// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/shop.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/UserNameShouldBeHere/AvitoTask/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockShopService is a mock of ShopService interface.
type MockShopService struct {
	ctrl     *gomock.Controller
	recorder *MockShopServiceMockRecorder
}

// MockShopServiceMockRecorder is the mock recorder for MockShopService.
type MockShopServiceMockRecorder struct {
	mock *MockShopService
}

// NewMockShopService creates a new mock instance.
func NewMockShopService(ctrl *gomock.Controller) *MockShopService {
	mock := &MockShopService{ctrl: ctrl}
	mock.recorder = &MockShopServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopService) EXPECT() *MockShopServiceMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockShopService) BuyItem(ctx context.Context, username, itemName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, username, itemName)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockShopServiceMockRecorder) BuyItem(ctx, username, itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockShopService)(nil).BuyItem), ctx, username, itemName)
}

// GetInfo mocks base method.
func (m *MockShopService) GetInfo(ctx context.Context, username string) (domain.InventoryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, username)
	ret0, _ := ret[0].(domain.InventoryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockShopServiceMockRecorder) GetInfo(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockShopService)(nil).GetInfo), ctx, username)
}

// SendCoin mocks base method.
func (m *MockShopService) SendCoin(ctx context.Context, transaction domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoin", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoin indicates an expected call of SendCoin.
func (mr *MockShopServiceMockRecorder) SendCoin(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoin", reflect.TypeOf((*MockShopService)(nil).SendCoin), ctx, transaction)
}
