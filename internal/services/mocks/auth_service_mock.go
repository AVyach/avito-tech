// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/UserNameShouldBeHere/AvitoTask/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockAuthService) Check(ctx context.Context, token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockAuthServiceMockRecorder) Check(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAuthService)(nil).Check), ctx, token)
}

// GetNameAndCheck mocks base method.
func (m *MockAuthService) GetNameAndCheck(ctx context.Context, token string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameAndCheck", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetNameAndCheck indicates an expected call of GetNameAndCheck.
func (mr *MockAuthServiceMockRecorder) GetNameAndCheck(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameAndCheck", reflect.TypeOf((*MockAuthService)(nil).GetNameAndCheck), ctx, token)
}

// LoginOrCreateUser mocks base method.
func (m *MockAuthService) LoginOrCreateUser(ctx context.Context, userCreds domain.UserCredantials) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginOrCreateUser", ctx, userCreds)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginOrCreateUser indicates an expected call of LoginOrCreateUser.
func (mr *MockAuthServiceMockRecorder) LoginOrCreateUser(ctx, userCreds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOrCreateUser", reflect.TypeOf((*MockAuthService)(nil).LoginOrCreateUser), ctx, userCreds)
}
